{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo } from \"react\";\nimport isPlainObject from \"lodash/isPlainObject\";\nconst getRouteInfo = (navTree, key) => {\n  if (navTree.key === key) {\n    return navTree;\n  }\n  let activedRoute;\n  let isIncludeActivedRoute = false;\n  for (let p in navTree) {\n    if (p !== \"icon\" && navTree.hasOwnProperty(p) && typeof navTree[p] === \"object\") {\n      if (isPlainObject(navTree[p]) && navTree[p].subMenu.length > 0) {\n        if (navTree[p].subMenu.some(el => el.key === key)) {\n          isIncludeActivedRoute = true;\n        }\n      }\n      activedRoute = getRouteInfo(navTree[p], key);\n      if (activedRoute) {\n        if (isIncludeActivedRoute) {\n          activedRoute.parentKey = navTree[p].key;\n        }\n        return activedRoute;\n      }\n    }\n  }\n  return activedRoute;\n};\nconst findNestedRoute = (navTree, key) => {\n  let found = navTree === null || navTree === void 0 ? void 0 : navTree.find(node => {\n    return node.key === key;\n  });\n  if (found) {\n    return true;\n  }\n  return navTree === null || navTree === void 0 ? void 0 : navTree.some(c => findNestedRoute(c.subMenu, key));\n};\nconst getTopRouteKey = (navTree, key) => {\n  let foundNav = {};\n  navTree.forEach(nav => {\n    if (findNestedRoute([nav], key)) {\n      foundNav = nav;\n    }\n  });\n  return foundNav;\n};\nfunction useMenuActive(navTree, key) {\n  _s();\n  const activedRoute = useMemo(() => {\n    const route = getRouteInfo(navTree, key);\n    return route;\n  }, [navTree, key]);\n  const includedRouteTree = useMemo(() => {\n    const included = getTopRouteKey(navTree, key);\n    return included;\n  }, [navTree, key]);\n  return {\n    activedRoute,\n    includedRouteTree\n  };\n}\n_s(useMenuActive, \"me5bxzeFSJ1+mMJ1Zo7PdpHELyY=\");\nexport default useMenuActive;","map":{"version":3,"names":["useMemo","isPlainObject","getRouteInfo","navTree","key","activedRoute","isIncludeActivedRoute","p","hasOwnProperty","subMenu","length","some","el","parentKey","findNestedRoute","found","find","node","c","getTopRouteKey","foundNav","forEach","nav","useMenuActive","_s","route","includedRouteTree","included"],"sources":["C:/Projects/task-app/admin/src/utils/hooks/useMenuActive.js"],"sourcesContent":["import { useMemo } from \"react\";\r\nimport isPlainObject from \"lodash/isPlainObject\";\r\n\r\nconst getRouteInfo = (navTree, key) => {\r\n  if (navTree.key === key) {\r\n    return navTree;\r\n  }\r\n  let activedRoute;\r\n  let isIncludeActivedRoute = false;\r\n  for (let p in navTree) {\r\n    if (\r\n      p !== \"icon\" &&\r\n      navTree.hasOwnProperty(p) &&\r\n      typeof navTree[p] === \"object\"\r\n    ) {\r\n      if (isPlainObject(navTree[p]) && navTree[p].subMenu.length > 0) {\r\n        if (navTree[p].subMenu.some((el) => el.key === key)) {\r\n          isIncludeActivedRoute = true;\r\n        }\r\n      }\r\n\r\n      activedRoute = getRouteInfo(navTree[p], key);\r\n\r\n      if (activedRoute) {\r\n        if (isIncludeActivedRoute) {\r\n          activedRoute.parentKey = navTree[p].key;\r\n        }\r\n\r\n        return activedRoute;\r\n      }\r\n    }\r\n  }\r\n  return activedRoute;\r\n};\r\n\r\nconst findNestedRoute = (navTree, key) => {\r\n  let found = navTree?.find((node) => {\r\n    return node.key === key;\r\n  });\r\n  if (found) {\r\n    return true;\r\n  }\r\n  return navTree?.some((c) => findNestedRoute(c.subMenu, key));\r\n};\r\n\r\nconst getTopRouteKey = (navTree, key) => {\r\n  let foundNav = {};\r\n  navTree.forEach((nav) => {\r\n    if (findNestedRoute([nav], key)) {\r\n      foundNav = nav;\r\n    }\r\n  });\r\n  return foundNav;\r\n};\r\n\r\nfunction useMenuActive(navTree, key) {\r\n  const activedRoute = useMemo(() => {\r\n    const route = getRouteInfo(navTree, key);\r\n    return route;\r\n  }, [navTree, key]);\r\n\r\n  const includedRouteTree = useMemo(() => {\r\n    const included = getTopRouteKey(navTree, key);\r\n    return included;\r\n  }, [navTree, key]);\r\n\r\n  return { activedRoute, includedRouteTree };\r\n}\r\n\r\nexport default useMenuActive;\r\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,OAAOC,aAAa,MAAM,sBAAsB;AAEhD,MAAMC,YAAY,GAAGA,CAACC,OAAO,EAAEC,GAAG,KAAK;EACrC,IAAID,OAAO,CAACC,GAAG,KAAKA,GAAG,EAAE;IACvB,OAAOD,OAAO;EAChB;EACA,IAAIE,YAAY;EAChB,IAAIC,qBAAqB,GAAG,KAAK;EACjC,KAAK,IAAIC,CAAC,IAAIJ,OAAO,EAAE;IACrB,IACEI,CAAC,KAAK,MAAM,IACZJ,OAAO,CAACK,cAAc,CAACD,CAAC,CAAC,IACzB,OAAOJ,OAAO,CAACI,CAAC,CAAC,KAAK,QAAQ,EAC9B;MACA,IAAIN,aAAa,CAACE,OAAO,CAACI,CAAC,CAAC,CAAC,IAAIJ,OAAO,CAACI,CAAC,CAAC,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;QAC9D,IAAIP,OAAO,CAACI,CAAC,CAAC,CAACE,OAAO,CAACE,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACR,GAAG,KAAKA,GAAG,CAAC,EAAE;UACnDE,qBAAqB,GAAG,IAAI;QAC9B;MACF;MAEAD,YAAY,GAAGH,YAAY,CAACC,OAAO,CAACI,CAAC,CAAC,EAAEH,GAAG,CAAC;MAE5C,IAAIC,YAAY,EAAE;QAChB,IAAIC,qBAAqB,EAAE;UACzBD,YAAY,CAACQ,SAAS,GAAGV,OAAO,CAACI,CAAC,CAAC,CAACH,GAAG;QACzC;QAEA,OAAOC,YAAY;MACrB;IACF;EACF;EACA,OAAOA,YAAY;AACrB,CAAC;AAED,MAAMS,eAAe,GAAGA,CAACX,OAAO,EAAEC,GAAG,KAAK;EACxC,IAAIW,KAAK,GAAGZ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEa,IAAI,CAAEC,IAAI,IAAK;IAClC,OAAOA,IAAI,CAACb,GAAG,KAAKA,GAAG;EACzB,CAAC,CAAC;EACF,IAAIW,KAAK,EAAE;IACT,OAAO,IAAI;EACb;EACA,OAAOZ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEQ,IAAI,CAAEO,CAAC,IAAKJ,eAAe,CAACI,CAAC,CAACT,OAAO,EAAEL,GAAG,CAAC,CAAC;AAC9D,CAAC;AAED,MAAMe,cAAc,GAAGA,CAAChB,OAAO,EAAEC,GAAG,KAAK;EACvC,IAAIgB,QAAQ,GAAG,CAAC,CAAC;EACjBjB,OAAO,CAACkB,OAAO,CAAEC,GAAG,IAAK;IACvB,IAAIR,eAAe,CAAC,CAACQ,GAAG,CAAC,EAAElB,GAAG,CAAC,EAAE;MAC/BgB,QAAQ,GAAGE,GAAG;IAChB;EACF,CAAC,CAAC;EACF,OAAOF,QAAQ;AACjB,CAAC;AAED,SAASG,aAAaA,CAACpB,OAAO,EAAEC,GAAG,EAAE;EAAAoB,EAAA;EACnC,MAAMnB,YAAY,GAAGL,OAAO,CAAC,MAAM;IACjC,MAAMyB,KAAK,GAAGvB,YAAY,CAACC,OAAO,EAAEC,GAAG,CAAC;IACxC,OAAOqB,KAAK;EACd,CAAC,EAAE,CAACtB,OAAO,EAAEC,GAAG,CAAC,CAAC;EAElB,MAAMsB,iBAAiB,GAAG1B,OAAO,CAAC,MAAM;IACtC,MAAM2B,QAAQ,GAAGR,cAAc,CAAChB,OAAO,EAAEC,GAAG,CAAC;IAC7C,OAAOuB,QAAQ;EACjB,CAAC,EAAE,CAACxB,OAAO,EAAEC,GAAG,CAAC,CAAC;EAElB,OAAO;IAAEC,YAAY;IAAEqB;EAAkB,CAAC;AAC5C;AAACF,EAAA,CAZQD,aAAa;AActB,eAAeA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}