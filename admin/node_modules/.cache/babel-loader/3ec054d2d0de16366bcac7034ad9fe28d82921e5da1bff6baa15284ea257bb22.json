{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\task-app\\\\admin\\\\src\\\\components\\\\ui\\\\Switcher\\\\Switcher.js\",\n  _s = $RefreshSig$();\nimport React, { forwardRef, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport Spinner from \"../Spinner\";\nimport useThemeClass from \"utils/hooks/useThemeClass\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Switcher = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n  const {\n    checked,\n    checkedContent,\n    className,\n    color,\n    defaultChecked,\n    disabled,\n    isLoading,\n    labelRef,\n    name,\n    onChange,\n    readOnly,\n    unCheckedContent,\n    field,\n    ...rest\n  } = props;\n  const {\n    themeColorAndLevel\n  } = useThemeClass();\n  const [switcherChecked, setSwitcherChecked] = useState(defaultChecked || checked);\n  useEffect(() => {\n    if (typeof checked !== \"undefined\") {\n      setSwitcherChecked(checked);\n    }\n  }, [checked]);\n  const getControlProps = () => {\n    let checkedValue = switcherChecked;\n    let checked = {\n      value: checkedValue\n    };\n    if (field) {\n      checkedValue = typeof field.value === \"boolean\" ? field.value : defaultChecked;\n      checked = {\n        value: checkedValue,\n        checked: checkedValue\n      };\n    }\n    if (defaultChecked) {\n      checked.defaultChecked = defaultChecked;\n    }\n    return checked;\n  };\n  const controlProps = getControlProps();\n  const handleChange = e => {\n    const nextChecked = !switcherChecked;\n    if (disabled || readOnly || isLoading) {\n      return;\n    }\n    if (typeof checked === \"undefined\") {\n      setSwitcherChecked(nextChecked);\n      onChange === null || onChange === void 0 ? void 0 : onChange(nextChecked, e);\n    } else {\n      onChange === null || onChange === void 0 ? void 0 : onChange(switcherChecked, e);\n    }\n  };\n  const switcherColor = color || `${themeColorAndLevel}`;\n  const switcherClass = classNames(\"switcher\", (switcherChecked || controlProps.checked) && `switcher-checked bg-${switcherColor} dark:bg-${switcherColor}`, disabled && \"switcher-disabled\", className);\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    ref: labelRef,\n    className: switcherClass,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: ref,\n      type: \"checkbox\",\n      disabled: disabled,\n      readOnly: readOnly,\n      onChange: handleChange,\n      name: name,\n      ...controlProps,\n      ...field,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n      className: classNames(\"switcher-toggle-loading\", switcherChecked ? \"switcher-checked-loading\" : \"switcher-uncheck-loading\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"switcher-toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"switcher-content\",\n      children: switcherChecked ? checkedContent : unCheckedContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}, \"iHjnSxJ02b65fpq8ivB0BGK09T0=\", false, function () {\n  return [useThemeClass];\n})), \"iHjnSxJ02b65fpq8ivB0BGK09T0=\", false, function () {\n  return [useThemeClass];\n});\n_c2 = Switcher;\nSwitcher.defaultProps = {\n  isLoading: false\n};\nSwitcher.propTypes = {\n  checked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  color: PropTypes.string,\n  onChange: PropTypes.func,\n  checkedContent: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  unCheckedContent: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  labelRef: PropTypes.string\n};\nexport default Switcher;\nvar _c, _c2;\n$RefreshReg$(_c, \"Switcher$forwardRef\");\n$RefreshReg$(_c2, \"Switcher\");","map":{"version":3,"names":["React","forwardRef","useState","useEffect","PropTypes","classNames","Spinner","useThemeClass","jsxDEV","_jsxDEV","Switcher","_s","_c","props","ref","checked","checkedContent","className","color","defaultChecked","disabled","isLoading","labelRef","name","onChange","readOnly","unCheckedContent","field","rest","themeColorAndLevel","switcherChecked","setSwitcherChecked","getControlProps","checkedValue","value","controlProps","handleChange","e","nextChecked","switcherColor","switcherClass","children","type","fileName","_jsxFileName","lineNumber","columnNumber","_c2","defaultProps","propTypes","bool","string","func","oneOfType","node","$RefreshReg$"],"sources":["C:/Projects/task-app/admin/src/components/ui/Switcher/Switcher.js"],"sourcesContent":["import React, { forwardRef, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport Spinner from \"../Spinner\";\nimport useThemeClass from \"utils/hooks/useThemeClass\";\n\nconst Switcher = forwardRef((props, ref) => {\n  const {\n    checked,\n    checkedContent,\n    className,\n    color,\n    defaultChecked,\n    disabled,\n    isLoading,\n    labelRef,\n    name,\n    onChange,\n    readOnly,\n    unCheckedContent,\n    field,\n    ...rest\n  } = props;\n  const { themeColorAndLevel } = useThemeClass();\n\n  const [switcherChecked, setSwitcherChecked] = useState(\n    defaultChecked || checked\n  );\n\n  useEffect(() => {\n    if (typeof checked !== \"undefined\") {\n      setSwitcherChecked(checked);\n    }\n  }, [checked]);\n\n  const getControlProps = () => {\n    let checkedValue = switcherChecked;\n\n    let checked = { value: checkedValue };\n\n    if (field) {\n      checkedValue =\n        typeof field.value === \"boolean\" ? field.value : defaultChecked;\n      checked = { value: checkedValue, checked: checkedValue };\n    }\n\n    if (defaultChecked) {\n      checked.defaultChecked = defaultChecked;\n    }\n    return checked;\n  };\n\n  const controlProps = getControlProps();\n\n  const handleChange = (e) => {\n    const nextChecked = !switcherChecked;\n\n    if (disabled || readOnly || isLoading) {\n      return;\n    }\n\n    if (typeof checked === \"undefined\") {\n      setSwitcherChecked(nextChecked);\n      onChange?.(nextChecked, e);\n    } else {\n      onChange?.(switcherChecked, e);\n    }\n  };\n\n  const switcherColor = color || `${themeColorAndLevel}`;\n\n  const switcherClass = classNames(\n    \"switcher\",\n    (switcherChecked || controlProps.checked) &&\n      `switcher-checked bg-${switcherColor} dark:bg-${switcherColor}`,\n    disabled && \"switcher-disabled\",\n    className\n  );\n\n  return (\n    <label ref={labelRef} className={switcherClass}>\n      <input\n        ref={ref}\n        type=\"checkbox\"\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        name={name}\n        {...controlProps}\n        {...field}\n        {...rest}\n      />\n      {isLoading ? (\n        <Spinner\n          className={classNames(\n            \"switcher-toggle-loading\",\n            switcherChecked\n              ? \"switcher-checked-loading\"\n              : \"switcher-uncheck-loading\"\n          )}\n        />\n      ) : (\n        <div className=\"switcher-toggle\" />\n      )}\n      <span className=\"switcher-content\">\n        {switcherChecked ? checkedContent : unCheckedContent}\n      </span>\n    </label>\n  );\n});\n\nSwitcher.defaultProps = {\n  isLoading: false,\n};\n\nSwitcher.propTypes = {\n  checked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  color: PropTypes.string,\n  onChange: PropTypes.func,\n  checkedContent: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  unCheckedContent: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  labelRef: PropTypes.string,\n};\n\nexport default Switcher;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}