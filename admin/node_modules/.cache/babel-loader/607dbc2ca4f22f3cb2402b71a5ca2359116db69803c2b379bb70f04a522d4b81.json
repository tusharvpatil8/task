{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { themeConfig } from \"configs/theme.config\";\nimport { LAYOUT_TYPE_MODERN, LAYOUT_TYPE_CLASSIC, LAYOUT_TYPE_STACKED_SIDE, NAV_MODE_TRANSPARENT, NAV_MODE_LIGHT, NAV_MODE_DARK, NAV_MODE_THEMED, MODE_DARK, MODE_LIGHT, LAYOUT_TYPE_DECKED } from \"constants/theme.constant\";\nconst initialState = {\n  themeColor: themeConfig.themeColor,\n  direction: themeConfig.direction,\n  mode: themeConfig.mode,\n  locale: themeConfig.locale,\n  primaryColorLevel: themeConfig.primaryColorLevel,\n  panelExpand: themeConfig.panelExpand,\n  navMode: themeConfig.navMode,\n  layout: themeConfig.layout\n};\nconst availableNavColorLayouts = [LAYOUT_TYPE_CLASSIC, LAYOUT_TYPE_STACKED_SIDE, LAYOUT_TYPE_DECKED];\nexport const themeSlice = createSlice({\n  name: \"theme\",\n  initialState,\n  reducers: {\n    setDirection: (state, action) => {\n      state.direction = action.payload;\n    },\n    setMode: (state, action) => {\n      const availableColorNav = availableNavColorLayouts.includes(state.layout.type);\n      if (availableColorNav && action.payload === MODE_DARK && state.navMode !== NAV_MODE_THEMED) {\n        state.navMode = NAV_MODE_DARK;\n      }\n      if (availableColorNav && action.payload === MODE_LIGHT && state.navMode !== NAV_MODE_THEMED) {\n        state.navMode = NAV_MODE_LIGHT;\n      }\n      state.mode = action.payload;\n    },\n    setLang: (state, action) => {\n      state.locale = action.payload;\n    },\n    setLayout: (state, action) => {\n      state.cardBordered = action.payload === LAYOUT_TYPE_MODERN;\n      if (action.payload === LAYOUT_TYPE_MODERN) {\n        state.navMode = NAV_MODE_TRANSPARENT;\n      }\n      const availableColorNav = availableNavColorLayouts.includes(action.payload);\n      if (availableColorNav && state.mode === MODE_LIGHT) {\n        state.navMode = NAV_MODE_LIGHT;\n      }\n      if (availableColorNav && state.mode === MODE_DARK) {\n        state.navMode = NAV_MODE_DARK;\n      }\n      state.layout = {\n        ...state.layout,\n        ...{\n          type: action.payload\n        }\n      };\n    },\n    setPreviousLayout: (state, action) => {\n      state.layout.previousType = action.payload;\n    },\n    setSideNavCollapse: (state, action) => {\n      state.layout = {\n        ...state.layout,\n        ...{\n          sideNavCollapse: action.payload\n        }\n      };\n    },\n    setNavMode: (state, action) => {\n      if (action.payload !== \"default\") {\n        state.navMode = action.payload;\n      } else {\n        if (state.layout.type === LAYOUT_TYPE_MODERN) {\n          state.navMode = NAV_MODE_TRANSPARENT;\n        }\n        const availableColorNav = availableNavColorLayouts.includes(state.layout.type);\n        if (availableColorNav && state.mode === MODE_LIGHT) {\n          state.navMode = NAV_MODE_LIGHT;\n        }\n        if (availableColorNav && state.mode === MODE_DARK) {\n          state.navMode = NAV_MODE_DARK;\n        }\n      }\n    },\n    setPanelExpand: (state, action) => {\n      state.panelExpand = action.payload;\n    },\n    setThemeColor: (state, action) => {\n      state.themeColor = action.payload;\n    },\n    setThemeColorLevel: (state, action) => {\n      state.primaryColorLevel = action.payload;\n    }\n  }\n});\nexport const {\n  setDirection,\n  setMode,\n  setLang,\n  setLayout,\n  setSideNavCollapse,\n  setNavMode,\n  setPanelExpand,\n  setThemeColor,\n  setThemeColorLevel,\n  setPreviousLayout\n} = themeSlice.actions;\nexport default themeSlice.reducer;","map":{"version":3,"names":["createSlice","themeConfig","LAYOUT_TYPE_MODERN","LAYOUT_TYPE_CLASSIC","LAYOUT_TYPE_STACKED_SIDE","NAV_MODE_TRANSPARENT","NAV_MODE_LIGHT","NAV_MODE_DARK","NAV_MODE_THEMED","MODE_DARK","MODE_LIGHT","LAYOUT_TYPE_DECKED","initialState","themeColor","direction","mode","locale","primaryColorLevel","panelExpand","navMode","layout","availableNavColorLayouts","themeSlice","name","reducers","setDirection","state","action","payload","setMode","availableColorNav","includes","type","setLang","setLayout","cardBordered","setPreviousLayout","previousType","setSideNavCollapse","sideNavCollapse","setNavMode","setPanelExpand","setThemeColor","setThemeColorLevel","actions","reducer"],"sources":["C:/Projects/task-app/admin/src/store/theme/themeSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { themeConfig } from \"configs/theme.config\";\r\nimport {\r\n  LAYOUT_TYPE_MODERN,\r\n  LAYOUT_TYPE_CLASSIC,\r\n  LAYOUT_TYPE_STACKED_SIDE,\r\n  NAV_MODE_TRANSPARENT,\r\n  NAV_MODE_LIGHT,\r\n  NAV_MODE_DARK,\r\n  NAV_MODE_THEMED,\r\n  MODE_DARK,\r\n  MODE_LIGHT,\r\n  LAYOUT_TYPE_DECKED,\r\n} from \"constants/theme.constant\";\r\n\r\nconst initialState = {\r\n  themeColor: themeConfig.themeColor,\r\n  direction: themeConfig.direction,\r\n  mode: themeConfig.mode,\r\n  locale: themeConfig.locale,\r\n  primaryColorLevel: themeConfig.primaryColorLevel,\r\n  panelExpand: themeConfig.panelExpand,\r\n  navMode: themeConfig.navMode,\r\n  layout: themeConfig.layout,\r\n};\r\n\r\nconst availableNavColorLayouts = [\r\n  LAYOUT_TYPE_CLASSIC,\r\n  LAYOUT_TYPE_STACKED_SIDE,\r\n  LAYOUT_TYPE_DECKED,\r\n];\r\n\r\nexport const themeSlice = createSlice({\r\n  name: \"theme\",\r\n  initialState,\r\n  reducers: {\r\n    setDirection: (state, action) => {\r\n      state.direction = action.payload;\r\n    },\r\n    setMode: (state, action) => {\r\n      const availableColorNav = availableNavColorLayouts.includes(\r\n        state.layout.type\r\n      );\r\n\r\n      if (\r\n        availableColorNav &&\r\n        action.payload === MODE_DARK &&\r\n        state.navMode !== NAV_MODE_THEMED\r\n      ) {\r\n        state.navMode = NAV_MODE_DARK;\r\n      }\r\n      if (\r\n        availableColorNav &&\r\n        action.payload === MODE_LIGHT &&\r\n        state.navMode !== NAV_MODE_THEMED\r\n      ) {\r\n        state.navMode = NAV_MODE_LIGHT;\r\n      }\r\n      state.mode = action.payload;\r\n    },\r\n    setLang: (state, action) => {\r\n      state.locale = action.payload;\r\n    },\r\n    setLayout: (state, action) => {\r\n      state.cardBordered = action.payload === LAYOUT_TYPE_MODERN;\r\n      if (action.payload === LAYOUT_TYPE_MODERN) {\r\n        state.navMode = NAV_MODE_TRANSPARENT;\r\n      }\r\n\r\n      const availableColorNav = availableNavColorLayouts.includes(\r\n        action.payload\r\n      );\r\n\r\n      if (availableColorNav && state.mode === MODE_LIGHT) {\r\n        state.navMode = NAV_MODE_LIGHT;\r\n      }\r\n\r\n      if (availableColorNav && state.mode === MODE_DARK) {\r\n        state.navMode = NAV_MODE_DARK;\r\n      }\r\n\r\n      state.layout = {\r\n        ...state.layout,\r\n        ...{ type: action.payload },\r\n      };\r\n    },\r\n    setPreviousLayout: (state, action) => {\r\n      state.layout.previousType = action.payload;\r\n    },\r\n    setSideNavCollapse: (state, action) => {\r\n      state.layout = {\r\n        ...state.layout,\r\n        ...{ sideNavCollapse: action.payload },\r\n      };\r\n    },\r\n    setNavMode: (state, action) => {\r\n      if (action.payload !== \"default\") {\r\n        state.navMode = action.payload;\r\n      } else {\r\n        if (state.layout.type === LAYOUT_TYPE_MODERN) {\r\n          state.navMode = NAV_MODE_TRANSPARENT;\r\n        }\r\n\r\n        const availableColorNav = availableNavColorLayouts.includes(\r\n          state.layout.type\r\n        );\r\n\r\n        if (availableColorNav && state.mode === MODE_LIGHT) {\r\n          state.navMode = NAV_MODE_LIGHT;\r\n        }\r\n\r\n        if (availableColorNav && state.mode === MODE_DARK) {\r\n          state.navMode = NAV_MODE_DARK;\r\n        }\r\n      }\r\n    },\r\n    setPanelExpand: (state, action) => {\r\n      state.panelExpand = action.payload;\r\n    },\r\n    setThemeColor: (state, action) => {\r\n      state.themeColor = action.payload;\r\n    },\r\n    setThemeColorLevel: (state, action) => {\r\n      state.primaryColorLevel = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setDirection,\r\n  setMode,\r\n  setLang,\r\n  setLayout,\r\n  setSideNavCollapse,\r\n  setNavMode,\r\n  setPanelExpand,\r\n  setThemeColor,\r\n  setThemeColorLevel,\r\n  setPreviousLayout,\r\n} = themeSlice.actions;\r\n\r\nexport default themeSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}