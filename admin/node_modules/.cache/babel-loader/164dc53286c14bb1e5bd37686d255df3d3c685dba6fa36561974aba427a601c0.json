{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\task-app\\\\admin\\\\src\\\\components\\\\ui\\\\Pagination\\\\Pagination.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport Pager from \"./Pagers\";\nimport Prev from \"./Prev\";\nimport Next from \"./Next\";\nimport Total from \"./Total\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\n// import { useConfig } from \"../ConfigProvider\";\nimport useThemeClass from \"utils/hooks/useThemeClass\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Pagination = props => {\n  _s();\n  const {\n    className,\n    currentPage,\n    displayTotal,\n    onChange,\n    pageSize,\n    total\n  } = props;\n  const [paginationTotal, setPaginationTotal] = useState(total);\n  const [internalPageSize, setInternalPageSize] = useState(pageSize);\n\n  // const { themeColor } = useConfig();\n  const {\n    bgTheme\n  } = useThemeClass();\n  const getInternalPageCount = useMemo(() => {\n    if (typeof paginationTotal === \"number\") {\n      return Math.ceil(paginationTotal / internalPageSize);\n    }\n    return null;\n  }, [paginationTotal, internalPageSize]);\n  const getValidCurrentPage = useCallback(count => {\n    const value = parseInt(count, 10);\n    let internalPageCount = getInternalPageCount;\n    let resetValue;\n    if (!internalPageCount) {\n      if (isNaN(value) || value < 1) {\n        resetValue = 1;\n      }\n    } else {\n      if (value < 1) {\n        resetValue = 1;\n      }\n      if (value > internalPageCount) {\n        resetValue = internalPageCount;\n      }\n    }\n    if (resetValue === undefined && isNaN(value) || resetValue === 0) {\n      resetValue = 1;\n    }\n    return resetValue === undefined ? value : resetValue;\n  }, [getInternalPageCount]);\n  const [internalCurrentPage, setInternalCurrentPage] = useState(currentPage ? getValidCurrentPage(currentPage) : 1);\n  useEffect(() => {\n    if (total !== paginationTotal) {\n      setPaginationTotal(total);\n    }\n    if (pageSize !== internalPageSize) {\n      setInternalPageSize(pageSize);\n    }\n    if (currentPage !== internalCurrentPage) {\n      setInternalCurrentPage(currentPage);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [total, pageSize, currentPage]);\n  const onPaginationChange = val => {\n    setInternalCurrentPage(getValidCurrentPage(val));\n    onChange === null || onChange === void 0 ? void 0 : onChange(getValidCurrentPage(val));\n  };\n  const onPrev = useCallback(() => {\n    const newPage = internalCurrentPage - 1;\n    setInternalCurrentPage(getValidCurrentPage(newPage));\n    onChange === null || onChange === void 0 ? void 0 : onChange(getValidCurrentPage(newPage));\n  }, [onChange, internalCurrentPage, getValidCurrentPage]);\n  const onNext = useCallback(() => {\n    const newPage = internalCurrentPage + 1;\n    setInternalCurrentPage(getValidCurrentPage(newPage));\n    onChange === null || onChange === void 0 ? void 0 : onChange(getValidCurrentPage(newPage));\n  }, [onChange, internalCurrentPage, getValidCurrentPage]);\n  const pagerClass = {\n    default: \"pagination-pager\",\n    inactive: \"pagination-pager-inactive\",\n    active: `text-white ${bgTheme} hover:${bgTheme} dark:${bgTheme} `,\n    disabled: \"pagination-pager-disabled\"\n  };\n  const paginationClass = classNames(\"pagination\", className);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: paginationClass,\n    children: [displayTotal && /*#__PURE__*/_jsxDEV(Total, {\n      total: total\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Prev, {\n      currentPage: internalCurrentPage,\n      pagerClass: pagerClass,\n      onPrev: onPrev\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pager, {\n      onChange: onPaginationChange,\n      pageCount: getInternalPageCount,\n      currentPage: internalCurrentPage,\n      pagerClass: pagerClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Next, {\n      currentPage: internalCurrentPage,\n      pageCount: getInternalPageCount,\n      pagerClass: pagerClass,\n      onNext: onNext\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(Pagination, \"P5q4NyD8Y9bkMAbJnfz7CFojiqY=\", false, function () {\n  return [useThemeClass];\n});\n_c = Pagination;\nPagination.propTypes = {\n  total: PropTypes.number,\n  displayTotal: PropTypes.bool,\n  pageSize: PropTypes.number,\n  className: PropTypes.string,\n  currentPage: PropTypes.number,\n  onChange: PropTypes.func\n};\nPagination.defaultProps = {\n  pageSize: 1,\n  currentPage: 1,\n  total: 5,\n  displayTotal: false\n};\nexport default Pagination;\nvar _c;\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","Pager","Prev","Next","Total","classNames","PropTypes","useThemeClass","jsxDEV","_jsxDEV","Pagination","props","_s","className","currentPage","displayTotal","onChange","pageSize","total","paginationTotal","setPaginationTotal","internalPageSize","setInternalPageSize","bgTheme","getInternalPageCount","Math","ceil","getValidCurrentPage","count","value","parseInt","internalPageCount","resetValue","isNaN","undefined","internalCurrentPage","setInternalCurrentPage","onPaginationChange","val","onPrev","newPage","onNext","pagerClass","default","inactive","active","disabled","paginationClass","children","fileName","_jsxFileName","lineNumber","columnNumber","pageCount","_c","propTypes","number","bool","string","func","defaultProps","$RefreshReg$"],"sources":["C:/Projects/task-app/admin/src/components/ui/Pagination/Pagination.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport Pager from \"./Pagers\";\nimport Prev from \"./Prev\";\nimport Next from \"./Next\";\nimport Total from \"./Total\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\n// import { useConfig } from \"../ConfigProvider\";\nimport useThemeClass from \"utils/hooks/useThemeClass\";\n\nconst Pagination = (props) => {\n  const { className, currentPage, displayTotal, onChange, pageSize, total } =\n    props;\n\n  const [paginationTotal, setPaginationTotal] = useState(total);\n  const [internalPageSize, setInternalPageSize] = useState(pageSize);\n\n  // const { themeColor } = useConfig();\n  const { bgTheme } = useThemeClass();\n\n  const getInternalPageCount = useMemo(() => {\n    if (typeof paginationTotal === \"number\") {\n      return Math.ceil(paginationTotal / internalPageSize);\n    }\n    return null;\n  }, [paginationTotal, internalPageSize]);\n\n  const getValidCurrentPage = useCallback(\n    (count) => {\n      const value = parseInt(count, 10);\n      let internalPageCount = getInternalPageCount;\n      let resetValue;\n      if (!internalPageCount) {\n        if (isNaN(value) || value < 1) {\n          resetValue = 1;\n        }\n      } else {\n        if (value < 1) {\n          resetValue = 1;\n        }\n        if (value > internalPageCount) {\n          resetValue = internalPageCount;\n        }\n      }\n      if ((resetValue === undefined && isNaN(value)) || resetValue === 0) {\n        resetValue = 1;\n      }\n\n      return resetValue === undefined ? value : resetValue;\n    },\n    [getInternalPageCount]\n  );\n\n  const [internalCurrentPage, setInternalCurrentPage] = useState(\n    currentPage ? getValidCurrentPage(currentPage) : 1\n  );\n  useEffect(() => {\n    if (total !== paginationTotal) {\n      setPaginationTotal(total);\n    }\n\n    if (pageSize !== internalPageSize) {\n      setInternalPageSize(pageSize);\n    }\n\n    if (currentPage !== internalCurrentPage) {\n      setInternalCurrentPage(currentPage);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [total, pageSize, currentPage]);\n\n  const onPaginationChange = (val) => {\n    setInternalCurrentPage(getValidCurrentPage(val));\n    onChange?.(getValidCurrentPage(val));\n  };\n\n  const onPrev = useCallback(() => {\n    const newPage = internalCurrentPage - 1;\n    setInternalCurrentPage(getValidCurrentPage(newPage));\n    onChange?.(getValidCurrentPage(newPage));\n  }, [onChange, internalCurrentPage, getValidCurrentPage]);\n\n  const onNext = useCallback(() => {\n    const newPage = internalCurrentPage + 1;\n    setInternalCurrentPage(getValidCurrentPage(newPage));\n    onChange?.(getValidCurrentPage(newPage));\n  }, [onChange, internalCurrentPage, getValidCurrentPage]);\n\n  const pagerClass = {\n    default: \"pagination-pager\",\n    inactive: \"pagination-pager-inactive\",\n    active: `text-white ${bgTheme} hover:${bgTheme} dark:${bgTheme} `,\n    disabled: \"pagination-pager-disabled\",\n  };\n\n  const paginationClass = classNames(\"pagination\", className);\n\n  return (\n    <div className={paginationClass}>\n      {displayTotal && <Total total={total} />}\n      <Prev\n        currentPage={internalCurrentPage}\n        pagerClass={pagerClass}\n        onPrev={onPrev}\n      />\n      <Pager\n        onChange={onPaginationChange}\n        pageCount={getInternalPageCount}\n        currentPage={internalCurrentPage}\n        pagerClass={pagerClass}\n      />\n      <Next\n        currentPage={internalCurrentPage}\n        pageCount={getInternalPageCount}\n        pagerClass={pagerClass}\n        onNext={onNext}\n      />\n    </div>\n  );\n};\n\nPagination.propTypes = {\n  total: PropTypes.number,\n  displayTotal: PropTypes.bool,\n  pageSize: PropTypes.number,\n  className: PropTypes.string,\n  currentPage: PropTypes.number,\n  onChange: PropTypes.func,\n};\n\nPagination.defaultProps = {\n  pageSize: 1,\n  currentPage: 1,\n  total: 5,\n  displayTotal: false,\n};\n\nexport default Pagination;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}